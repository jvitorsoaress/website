{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Development/Desktop/Site/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license Angular v16.2.9\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, InjectionToken, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nclass HttpHandler {}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nclass HttpBackend {}\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nclass HttpHeaders {\n  /**  Constructs a new HTTP header object with the given values.*/\n  constructor(headers) {\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n\n            if (this.headers.has(key)) {\n              this.headers.get(key).push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n      this.headers = new Map();\n      headers.forEach((values, name) => {\n        this.setHeaderEntries(name, values);\n      });\n    } else {\n      this.lazyInit = () => {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n          assertValidHeaders(headers);\n        }\n\n        this.headers = new Map();\n        Object.entries(headers).forEach(([name, values]) => {\n          this.setHeaderEntries(name, values);\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  has(name) {\n    this.init();\n    return this.headers.has(name.toLowerCase());\n  }\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n\n\n  get(name) {\n    this.init();\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.normalizedNames.values());\n  }\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n\n\n  getAll(name) {\n    this.init();\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the values.\n   * @param value The value to append.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n\n  append(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or override for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n\n\n  set(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n\n\n  delete(name, value) {\n    return this.clone({\n      name,\n      value,\n      op: 'd'\n    });\n  }\n\n  maybeSetNormalizedName(name, lcName) {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  init() {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n\n      this.lazyInit = null;\n\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  copyFrom(other) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key));\n      this.normalizedNames.set(key, other.normalizedNames.get(key));\n    });\n  }\n\n  clone(update) {\n    const clone = new HttpHeaders();\n    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  applyUpdate(update) {\n    const key = update.name.toLowerCase();\n\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value;\n\n        if (typeof value === 'string') {\n          value = [value];\n        }\n\n        if (value.length === 0) {\n          return;\n        }\n\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n\n      case 'd':\n        const toDelete = update.value;\n\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n\n          if (!existing) {\n            return;\n          }\n\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n\n        break;\n    }\n  }\n\n  setHeaderEntries(name, values) {\n    const headerValues = (Array.isArray(values) ? values : [values]).map(value => value.toString());\n    const key = name.toLowerCase();\n    this.headers.set(key, headerValues);\n    this.maybeSetNormalizedName(name, key);\n  }\n  /**\n   * @internal\n   */\n\n\n  forEach(fn) {\n    this.init();\n    Array.from(this.normalizedNames.keys()).forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n  }\n\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\n\n\nfunction assertValidHeaders(headers) {\n  for (const [key, value] of Object.entries(headers)) {\n    if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n      throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` + `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n    }\n  }\n}\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nclass HttpUrlEncodingCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key) {\n    return standardEncoding(key);\n  }\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n\n\n  encodeValue(value) {\n    return standardEncoding(value);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n\n\n  decodeKey(key) {\n    return decodeURIComponent(key);\n  }\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n\n\n  decodeValue(value) {\n    return decodeURIComponent(value);\n  }\n\n}\n\nfunction paramParser(rawParams, codec) {\n  const map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    const params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(param => {\n      const eqIdx = param.indexOf('=');\n      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\n\n\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n  '40': '@',\n  '3A': ':',\n  '24': '$',\n  '2C': ',',\n  '3B': ';',\n  '3D': '=',\n  '3F': '?',\n  '2F': '/'\n};\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\n\nfunction valueToString(value) {\n  return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nclass HttpParams {\n  constructor(options = {}) {\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = options.fromObject[key]; // convert the values to strings\n\n        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n        this.map.set(key, values);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  has(param) {\n    this.init();\n    return this.map.has(param);\n  }\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n\n\n  get(param) {\n    this.init();\n    const res = this.map.get(param);\n    return !!res ? res[0] : null;\n  }\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n\n\n  getAll(param) {\n    this.init();\n    return this.map.get(param) || null;\n  }\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n\n\n  keys() {\n    this.init();\n    return Array.from(this.map.keys());\n  }\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n\n\n  append(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'a'\n    });\n  }\n  /**\n   * Constructs a new body with appended values for the given parameter name.\n   * @param params parameters and values\n   * @return A new body with the new value.\n   */\n\n\n  appendAll(params) {\n    const updates = [];\n    Object.keys(params).forEach(param => {\n      const value = params[param];\n\n      if (Array.isArray(value)) {\n        value.forEach(_value => {\n          updates.push({\n            param,\n            value: _value,\n            op: 'a'\n          });\n        });\n      } else {\n        updates.push({\n          param,\n          value: value,\n          op: 'a'\n        });\n      }\n    });\n    return this.clone(updates);\n  }\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n\n\n  set(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 's'\n    });\n  }\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n\n\n  delete(param, value) {\n    return this.clone({\n      param,\n      value,\n      op: 'd'\n    });\n  }\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n\n\n  toString() {\n    this.init();\n    return this.keys().map(key => {\n      const eKey = this.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n      // `b: []` produces `''`\n      // `c: ['1', '2']` produces `'c=1&c=2'`\n\n      return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value)).join('&');\n    }) // filter out empty values because `b: []` produces `''`\n    // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n    .filter(param => param !== '').join('&');\n  }\n\n  clone(update) {\n    const clone = new HttpParams({\n      encoder: this.encoder\n    });\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat(update);\n    return clone;\n  }\n\n  init() {\n    if (this.map === null) {\n      this.map = new Map();\n    }\n\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n      this.updates.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n            base.push(valueToString(update.value));\n            this.map.set(update.param, base);\n            break;\n\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map.get(update.param) || [];\n              const idx = base.indexOf(valueToString(update.value));\n\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n\n              if (base.length > 0) {\n                this.map.set(update.param, base);\n              } else {\n                this.map.delete(update.param);\n              }\n            } else {\n              this.map.delete(update.param);\n              break;\n            }\n\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n\n}\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\n\n\nclass HttpContextToken {\n  constructor(defaultValue) {\n    this.defaultValue = defaultValue;\n  }\n\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\n\n\nclass HttpContext {\n  constructor() {\n    this.map = new Map();\n  }\n  /**\n   * Store a value in the context. If a value is already present it will be overwritten.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   * @param value The value to store.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  set(token, value) {\n    this.map.set(token, value);\n    return this;\n  }\n  /**\n   * Retrieve the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns The stored value or default if one is defined.\n   */\n\n\n  get(token) {\n    if (!this.map.has(token)) {\n      this.map.set(token, token.defaultValue());\n    }\n\n    return this.map.get(token);\n  }\n  /**\n   * Delete the value associated with the given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns A reference to itself for easy chaining.\n   */\n\n\n  delete(token) {\n    this.map.delete(token);\n    return this;\n  }\n  /**\n   * Checks for existence of a given token.\n   *\n   * @param token The reference to an instance of `HttpContextToken`.\n   *\n   * @returns True if the token exists, false otherwise.\n   */\n\n\n  has(token) {\n    return this.map.has(token);\n  }\n  /**\n   * @returns a list of tokens currently stored in the context.\n   */\n\n\n  keys() {\n    return this.map.keys();\n  }\n\n}\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\n\n\nfunction isUrlSearchParams(value) {\n  return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nclass HttpRequest {\n  constructor(method, url, third, fourth) {\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    let options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.context) {\n        this.context = options.context;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no context have been passed in, construct a new HttpContext instance.\n\n\n    if (!this.context) {\n      this.context = new HttpContext();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        const sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  serializeBody() {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    } // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n\n\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === 'string') {\n      return this.body;\n    } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    } // Fall back on toString() for everything else.\n\n\n    return this.body.toString();\n  }\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n\n\n  detectContentTypeHeader() {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    } // FormData bodies rely on the browser's content type assignment.\n\n\n    if (isFormData(this.body)) {\n      return null;\n    } // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n\n\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n    if (isArrayBuffer(this.body)) {\n      return null;\n    } // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n\n\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    } // `HttpUrlEncodedParams` has its own content-type.\n\n\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    } // Arrays, objects, boolean and numbers will be encoded as JSON.\n\n\n    if (typeof this.body === 'object' || typeof this.body === 'number' || typeof this.body === 'boolean') {\n      return 'application/json';\n    } // No type could be inferred.\n\n\n    return null;\n  }\n\n  clone(update = {}) {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n\n    const body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n\n    const withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n    const reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params; // Pass on context if needed\n\n    const context = update.context ?? this.context; // Check whether the caller has asked to add headers.\n\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers = Object.keys(update.setHeaders).reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n    } // Check whether the caller has asked to set params.\n\n\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams).reduce((params, param) => params.set(param, update.setParams[param]), params);\n    } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n    return new HttpRequest(method, url, body, {\n      params,\n      headers,\n      context,\n      reportProgress,\n      responseType,\n      withCredentials\n    });\n  }\n\n}\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   *\n   * Note: The `FetchBackend` doesn't support progress report on uploads.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\n\n\nclass HttpResponseBase {\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(init, defaultStatus = 200\n  /* HttpStatusCode.Ok */\n  , defaultStatusText = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nclass HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.ResponseHeader;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  clone(update = {}) {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nclass HttpResponse extends HttpResponseBase {\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init = {}) {\n    super(init);\n    this.type = HttpEventType.Response;\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  clone(update = {}) {\n    return new HttpResponse({\n      body: update.body !== undefined ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined\n    });\n  }\n\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nclass HttpErrorResponse extends HttpResponseBase {\n  constructor(init) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n    this.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    this.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n\n    this.error = init.error || null;\n  }\n\n}\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body,\n    headers: options.headers,\n    context: options.context,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nclass HttpClient {\n  constructor(handler) {\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n\n\n  request(first, url, options = {}) {\n    let req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n      // Figure out the headers.\n      let headers = undefined;\n\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      } // Sort out parameters.\n\n\n      let params = undefined;\n\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({\n            fromObject: options.params\n          });\n        }\n      } // Construct the request.\n\n\n      req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n        headers,\n        context: options.context,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials\n      });\n    } // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n    const events$ = of(req).pipe(concatMap(req => this.handler.handle(req))); // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    } // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n\n\n    const res$ = events$.pipe(filter(event => event instanceof HttpResponse)); // Decide which stream to return.\n\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map(res => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n\n              return res.body;\n            }));\n\n          case 'blob':\n            return res$.pipe(map(res => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n\n              return res.body;\n            }));\n\n          case 'text':\n            return res$.pipe(map(res => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n\n              return res.body;\n            }));\n\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map(res => res.body));\n        }\n\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n\n\n  delete(url, options = {}) {\n    return this.request('DELETE', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  get(url, options = {}) {\n    return this.request('GET', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  head(url, options = {}) {\n    return this.request('HEAD', url, options);\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n\n\n  jsonp(url, callbackParam) {\n    return this.request('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json'\n    });\n  }\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilities of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  options(url, options = {}) {\n    return this.request('OPTIONS', url, options);\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  patch(url, body, options = {}) {\n    return this.request('PATCH', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n\n\n  post(url, body, options = {}) {\n    return this.request('POST', url, addBody(options, body));\n  }\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n\n\n  put(url, body, options = {}) {\n    return this.request('PUT', url, addBody(options, body));\n  }\n\n}\n\nHttpClient.ɵfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(i0.ɵɵinject(HttpHandler));\n};\n\nHttpClient.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\n\nfunction getResponseUrl$1(response) {\n  if (response.url) {\n    return response.url;\n  } // stored as lowercase in the map\n\n\n  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n  return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n * @developerPreview\n */\n\n\nclass FetchBackend {\n  constructor() {\n    // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n    this.fetchImpl = inject(FetchFactory, {\n      optional: true\n    })?.fetch ?? fetch.bind(globalThis);\n    this.ngZone = inject(NgZone);\n  }\n\n  handle(request) {\n    return new Observable(observer => {\n      const aborter = new AbortController();\n      this.doRequest(request, aborter.signal, observer).then(noop, error => observer.error(new HttpErrorResponse({\n        error\n      })));\n      return () => aborter.abort();\n    });\n  }\n\n  doRequest(request, signal, observer) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const init = _this.createRequestInit(request);\n\n      let response;\n\n      try {\n        const fetchPromise = _this.fetchImpl(request.urlWithParams, {\n          signal,\n          ...init\n        }); // Make sure Zone.js doesn't trigger false-positive unhandled promise\n        // error in case the Promise is rejected synchronously. See function\n        // description for additional information.\n\n\n        silenceSuperfluousUnhandledPromiseRejection(fetchPromise); // Send the `Sent` event before awaiting the response.\n\n        observer.next({\n          type: HttpEventType.Sent\n        });\n        response = yield fetchPromise;\n      } catch (error) {\n        observer.error(new HttpErrorResponse({\n          error,\n          status: error.status ?? 0,\n          statusText: error.statusText,\n          url: request.urlWithParams,\n          headers: error.headers\n        }));\n        return;\n      }\n\n      const headers = new HttpHeaders(response.headers);\n      const statusText = response.statusText;\n      const url = getResponseUrl$1(response) ?? request.urlWithParams;\n      let status = response.status;\n      let body = null;\n\n      if (request.reportProgress) {\n        observer.next(new HttpHeaderResponse({\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n\n      if (response.body) {\n        // Read Progress\n        const contentLength = response.headers.get('content-length');\n        const chunks = [];\n        const reader = response.body.getReader();\n        let receivedLength = 0;\n        let decoder;\n        let partialText; // We have to check whether the Zone is defined in the global scope because this may be called\n        // when the zone is nooped.\n\n        const reqZone = typeof Zone !== 'undefined' && Zone.current; // Perform response processing outside of Angular zone to\n        // ensure no excessive change detection runs are executed\n        // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n\n        yield _this.ngZone.runOutsideAngular( /*#__PURE__*/_asyncToGenerator(function* () {\n          while (true) {\n            const {\n              done,\n              value\n            } = yield reader.read();\n\n            if (done) {\n              break;\n            }\n\n            chunks.push(value);\n            receivedLength += value.length;\n\n            if (request.reportProgress) {\n              partialText = request.responseType === 'text' ? (partialText ?? '') + (decoder ??= new TextDecoder()).decode(value, {\n                stream: true\n              }) : undefined;\n\n              const reportProgress = () => observer.next({\n                type: HttpEventType.DownloadProgress,\n                total: contentLength ? +contentLength : undefined,\n                loaded: receivedLength,\n                partialText\n              });\n\n              reqZone ? reqZone.run(reportProgress) : reportProgress();\n            }\n          }\n        })); // Combine all chunks.\n\n        const chunksAll = _this.concatChunks(chunks, receivedLength);\n\n        try {\n          body = _this.parseBody(request, chunksAll);\n        } catch (error) {\n          // Body loading or parsing failed\n          observer.error(new HttpErrorResponse({\n            error,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: getResponseUrl$1(response) ?? request.urlWithParams\n          }));\n          return;\n        }\n      } // Same behavior as the XhrBackend\n\n\n      if (status === 0) {\n        status = body ? 200\n        /* HttpStatusCode.Ok */\n        : 0;\n      } // ok determines whether the response will be transmitted on the event or\n      // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n      // but a successful status code can still result in an error if the user\n      // asked for JSON data and the body cannot be parsed as such.\n\n\n      const ok = status >= 200 && status < 300;\n\n      if (ok) {\n        observer.next(new HttpResponse({\n          body,\n          headers,\n          status,\n          statusText,\n          url\n        })); // The full body has been received and delivered, no further events\n        // are possible. This request is complete.\n\n        observer.complete();\n      } else {\n        observer.error(new HttpErrorResponse({\n          error: body,\n          headers,\n          status,\n          statusText,\n          url\n        }));\n      }\n    })();\n  }\n\n  parseBody(request, binContent) {\n    switch (request.responseType) {\n      case 'json':\n        // stripping the XSSI when present\n        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n        return text === '' ? null : JSON.parse(text);\n\n      case 'text':\n        return new TextDecoder().decode(binContent);\n\n      case 'blob':\n        return new Blob([binContent]);\n\n      case 'arraybuffer':\n        return binContent.buffer;\n    }\n  }\n\n  createRequestInit(req) {\n    // We could share some of this logic with the XhrBackend\n    const headers = {};\n    const credentials = req.withCredentials ? 'include' : undefined; // Setting all the requested headers.\n\n    req.headers.forEach((name, values) => headers[name] = values.join(',')); // Add an Accept header if one isn't present already.\n\n    headers['Accept'] ??= 'application/json, text/plain, */*'; // Auto-detect the Content-Type header if one isn't present already.\n\n    if (!headers['Content-Type']) {\n      const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n      if (detectedType !== null) {\n        headers['Content-Type'] = detectedType;\n      }\n    }\n\n    return {\n      body: req.serializeBody(),\n      method: req.method,\n      headers,\n      credentials\n    };\n  }\n\n  concatChunks(chunks, totalLength) {\n    const chunksAll = new Uint8Array(totalLength);\n    let position = 0;\n\n    for (const chunk of chunks) {\n      chunksAll.set(chunk, position);\n      position += chunk.length;\n    }\n\n    return chunksAll;\n  }\n\n}\n\nFetchBackend.ɵfac = function FetchBackend_Factory(t) {\n  return new (t || FetchBackend)();\n};\n\nFetchBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FetchBackend,\n  factory: FetchBackend.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FetchBackend, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\n\n\nclass FetchFactory {}\n\nfunction noop() {}\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\n\n\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n  promise.then(noop, noop);\n}\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n  return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\n\n\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n    handle: downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)\n  });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\n\n\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n  // clang-format off\n  return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn))); // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\n\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\n\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\n\nfunction legacyInterceptorFnFactory() {\n  let chain = null;\n  return (req, handler) => {\n    if (chain === null) {\n      const interceptors = inject(HTTP_INTERCEPTORS, {\n        optional: true\n      }) ?? []; // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n\n      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n    }\n\n    const pendingTasks = inject(ɵInitialRenderPendingTasks);\n    const taskId = pendingTasks.add();\n    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n  };\n}\n\nclass HttpInterceptorHandler extends HttpHandler {\n  constructor(backend, injector) {\n    super();\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n    this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n  }\n\n  handle(initialRequest) {\n    if (this.chain === null) {\n      const dedupedInterceptorFns = Array.from(new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])])); // Note: interceptors are wrapped right-to-left so that final execution order is\n      // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n      // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n      // out.\n\n      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n    }\n\n    const taskId = this.pendingTasks.add();\n    return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest)).pipe(finalize(() => this.pendingTasks.remove(taskId)));\n  }\n\n}\n\nHttpInterceptorHandler.ɵfac = function HttpInterceptorHandler_Factory(t) {\n  return new (t || HttpInterceptorHandler)(i0.ɵɵinject(HttpBackend), i0.ɵɵinject(i0.EnvironmentInjector));\n};\n\nHttpInterceptorHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpInterceptorHandler,\n  factory: HttpInterceptorHandler.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpInterceptorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})(); // Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\n\nlet foreignDocument; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.'; // Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\n\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nclass JsonpCallbackContext {}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\n\n\nclass JsonpClientBackend {\n  constructor(callbackMap, document) {\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n\n\n  nextCallback() {\n    return `ng_jsonp_callback_${nextRequestId++}`;\n  }\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n\n\n  handle(req) {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    } // Check the request headers. JSONP doesn't support headers and\n    // cannot set any that were supplied.\n\n\n    if (req.headers.keys().length > 0) {\n      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n    } // Everything else happens inside the Observable boundary.\n\n\n    return new Observable(observer => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`); // Construct the <script> tag and point it at the URL.\n\n      const node = this.document.createElement('script');\n      node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n      // The response object, if one has been received, or null otherwise.\n\n      let body = null; // Whether the response callback has been called.\n\n      let finished = false; // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n\n      this.callbackMap[callback] = data => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback]; // Set state to indicate data was received.\n\n        body = data;\n        finished = true;\n      }; // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        } // Remove the response callback from the callbackMap (window object in the\n        // browser).\n\n\n        delete this.callbackMap[callback];\n      }; // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n\n\n      const onLoad = event => {\n        // We wrap it in an extra Promise, to ensure the microtask\n        // is scheduled after the loaded endpoint has executed any potential microtask itself,\n        // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n        this.resolvedPromise.then(() => {\n          // Cleanup the page.\n          cleanup(); // Check whether the response callback has run.\n\n          if (!finished) {\n            // It hasn't, something went wrong with the request. Return an error via\n            // the Observable error path. All JSONP errors have status 0.\n            observer.error(new HttpErrorResponse({\n              url,\n              status: 0,\n              statusText: 'JSONP Error',\n              error: new Error(JSONP_ERR_NO_CALLBACK)\n            }));\n            return;\n          } // Success. body either contains the response body or null if none was\n          // returned.\n\n\n          observer.next(new HttpResponse({\n            body,\n            status: 200\n            /* HttpStatusCode.Ok */\n            ,\n            statusText: 'OK',\n            url\n          })); // Complete the stream, the response is over.\n\n          observer.complete();\n        });\n      }; // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n\n\n      const onError = error => {\n        cleanup(); // Wrap the error in a HttpErrorResponse.\n\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error',\n          url\n        }));\n      }; // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n\n\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node); // The request has now been successfully sent.\n\n      observer.next({\n        type: HttpEventType.Sent\n      }); // Cancellation handler.\n\n      return () => {\n        if (!finished) {\n          this.removeListeners(node);\n        } // And finally, clean up the page.\n\n\n        cleanup();\n      };\n    });\n  }\n\n  removeListeners(script) {\n    // Issue #34818\n    // Changing <script>'s ownerDocument will prevent it from execution.\n    // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n    if (!foreignDocument) {\n      foreignDocument = this.document.implementation.createHTMLDocument();\n    }\n\n    foreignDocument.adoptNode(script);\n  }\n\n}\n\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(i0.ɵɵinject(JsonpCallbackContext), i0.ɵɵinject(DOCUMENT));\n};\n\nJsonpClientBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\n\n\nfunction jsonpInterceptorFn(req, next) {\n  if (req.method === 'JSONP') {\n    return inject(JsonpClientBackend).handle(req);\n  } // Fall through for normal HTTP requests.\n\n\n  return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\n\n\nclass JsonpInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param initialRequest The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n\n\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n\n}\n\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n};\n\nJsonpInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\n\n\nclass HttpXhrBackend {\n  constructor(xhrFactory) {\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n\n\n  handle(req) {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the HttpClientJsonpModule\n    if (req.method === 'JSONP') {\n      throw new ɵRuntimeError(-2800\n      /* RuntimeErrorCode.MISSING_JSONP_MODULE */\n      , (typeof ngDevMode === 'undefined' || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n    } // Check whether this factory has a special function to load an XHR implementation\n    // for various non-browser environments. We currently limit it to only `ServerXhr`\n    // class, which needs to load an XHR implementation.\n\n\n    const xhrFactory = this.xhrFactory;\n    const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n    return source.pipe(switchMap(() => {\n      // Everything happens on Observable subscription.\n      return new Observable(observer => {\n        // Start by setting up the XHR object with request method, URL, and withCredentials\n        // flag.\n        const xhr = xhrFactory.build();\n        xhr.open(req.method, req.urlWithParams);\n\n        if (req.withCredentials) {\n          xhr.withCredentials = true;\n        } // Add all the requested headers.\n\n\n        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(','))); // Add an Accept header if one isn't present already.\n\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        } // Auto-detect the Content-Type header if one isn't present already.\n\n\n        if (!req.headers.has('Content-Type')) {\n          const detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        } // Set the responseType if one was requested.\n\n\n        if (req.responseType) {\n          const responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n        const reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n\n        let headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n\n        const partialFromXhr = () => {\n          if (headerResponse !== null) {\n            return headerResponse;\n          }\n\n          const statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n          const headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n\n          const url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n          headerResponse = new HttpHeaderResponse({\n            headers,\n            status: xhr.status,\n            statusText,\n            url\n          });\n          return headerResponse;\n        }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n\n\n        const onLoad = () => {\n          // Read response state from the memoized partial data.\n          let {\n            headers,\n            status,\n            statusText,\n            url\n          } = partialFromXhr(); // The body will be read out if present.\n\n          let body = null;\n\n          if (status !== 204\n          /* HttpStatusCode.NoContent */\n          ) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          } // Normalize another potential bug (this one comes from CORS).\n\n\n          if (status === 0) {\n            status = !!body ? 200\n            /* HttpStatusCode.Ok */\n            : 0;\n          } // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n\n\n          let ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            const originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the\n              // user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have\n              // been a JSON response. Restore the original body (including any XSSI prefix)\n              // to deliver a better error response.\n              body = originalBody; // If this was an error request to begin with, leave it as a string, it\n              // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false; // The parse error contains the text of the body that failed to parse.\n\n                body = {\n                  error,\n                  text: body\n                };\n              }\n            }\n          }\n\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            })); // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers,\n              status,\n              statusText,\n              url: url || undefined\n            }));\n          }\n        }; // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n\n\n        const onError = error => {\n          const {\n            url\n          } = partialFromXhr();\n          const res = new HttpErrorResponse({\n            error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progress event.\n\n\n        let sentHeaders = false; // The download progress event handler, which is only registered if\n        // progress events are enabled.\n\n        const onDownProgress = event => {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          } // Start building the download progress event to deliver on the response\n          // event stream.\n\n\n          let progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          }; // Set the total number of bytes in the event if it's available.\n\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          } // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n\n\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          } // Finally, fire the event.\n\n\n          observer.next(progressEvent);\n        }; // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n\n\n        const onUpProgress = event => {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          let progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          }; // If the total number of bytes being uploaded is available, include\n          // it.\n\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          } // Send the event.\n\n\n          observer.next(progress);\n        }; // By default, register for load and error events.\n\n\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        } // Fire the request, and notify the event stream that it was fired.\n\n\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        }); // This is the return from the Observable function, which is the\n        // request cancellation handler.\n\n        return () => {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          } // Finally, abort the in-flight request.\n\n\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }));\n  }\n\n}\n\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(i0.ɵɵinject(i1.XhrFactory));\n};\n\nHttpXhrBackend.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.XhrFactory\n    }];\n  }, null);\n})();\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_COOKIE_NAME\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n  providedIn: 'root',\n  factory: () => XSRF_DEFAULT_HEADER_NAME\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nclass HttpXsrfTokenExtractor {}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nclass HttpXsrfCookieExtractor {\n  constructor(doc, platform, cookieName) {\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n\n    this.parseCount = 0;\n  }\n\n  getToken() {\n    if (this.platform === 'server') {\n      return null;\n    }\n\n    const cookieString = this.doc.cookie || '';\n\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n\n    return this.lastToken;\n  }\n\n}\n\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(PLATFORM_ID), i0.ɵɵinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n\nfunction xsrfInterceptorFn(req, next) {\n  const lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n  // Non-mutating requests don't require a token, and absolute URLs require special handling\n  // anyway as the cookie set\n  // on our origin is not the same as the token expected by another origin.\n\n  if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n    return next(req);\n  }\n\n  const token = inject(HttpXsrfTokenExtractor).getToken();\n  const headerName = inject(XSRF_HEADER_NAME); // Be careful not to overwrite an existing header of the same name.\n\n  if (token != null && !req.headers.has(headerName)) {\n    req = req.clone({\n      headers: req.headers.set(headerName, token)\n    });\n  }\n\n  return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nclass HttpXsrfInterceptor {\n  constructor(injector) {\n    this.injector = injector;\n  }\n\n  intercept(initialRequest, next) {\n    return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n  }\n\n}\n\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(i0.ɵɵinject(i0.EnvironmentInjector));\n};\n\nHttpXsrfInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.EnvironmentInjector\n    }];\n  }, null);\n})();\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\n\n\nvar HttpFeatureKind;\n\n(function (HttpFeatureKind) {\n  HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n  HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n  HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n  HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n  HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n  HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\n\nfunction makeHttpFeature(kind, providers) {\n  return {\n    ɵkind: kind,\n    ɵproviders: providers\n  };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\n\n\nfunction provideHttpClient(...features) {\n  if (ngDevMode) {\n    const featureKinds = new Set(features.map(f => f.ɵkind));\n\n    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : '');\n    }\n  }\n\n  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {\n    provide: HttpHandler,\n    useExisting: HttpInterceptorHandler\n  }, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: xsrfInterceptorFn,\n    multi: true\n  }, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }];\n\n  for (const feature of features) {\n    providers.push(...feature.ɵproviders);\n  }\n\n  return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\n\n\nfunction withInterceptors(interceptorFns) {\n  return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n    return {\n      provide: HTTP_INTERCEPTOR_FNS,\n      useValue: interceptorFn,\n      multi: true\n    };\n  }));\n}\n\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\n\nfunction withInterceptorsFromDi() {\n  // Note: the legacy interceptor function is provided here via an intermediate token\n  // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n  // included multiple times, all of the multi-provider entries will have the same instance of the\n  // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n  // interceptors will not run multiple times.\n  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{\n    provide: LEGACY_INTERCEPTOR_FN,\n    useFactory: legacyInterceptorFnFactory\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useExisting: LEGACY_INTERCEPTOR_FN,\n    multi: true\n  }]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\n\n\nfunction withXsrfConfiguration({\n  cookieName,\n  headerName\n}) {\n  const providers = [];\n\n  if (cookieName !== undefined) {\n    providers.push({\n      provide: XSRF_COOKIE_NAME,\n      useValue: cookieName\n    });\n  }\n\n  if (headerName !== undefined) {\n    providers.push({\n      provide: XSRF_HEADER_NAME,\n      useValue: headerName\n    });\n  }\n\n  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\n\n\nfunction withNoXsrfProtection() {\n  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{\n    provide: XSRF_ENABLED,\n    useValue: false\n  }]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\n\n\nfunction withJsonpSupport() {\n  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTOR_FNS,\n    useValue: jsonpInterceptorFn,\n    multi: true\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\n\n\nfunction withRequestsMadeViaParent() {\n  return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [{\n    provide: HttpBackend,\n    useFactory: () => {\n      const handlerFromParent = inject(HttpHandler, {\n        skipSelf: true,\n        optional: true\n      });\n\n      if (ngDevMode && handlerFromParent === null) {\n        throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n      }\n\n      return handlerFromParent;\n    }\n  }]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n * @developerPreview\n */\n\n\nfunction withFetch() {\n  if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n    // TODO: Create a runtime error\n    // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n    throw new Error('The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' + 'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n  }\n\n  return makeHttpFeature(HttpFeatureKind.Fetch, [FetchBackend, {\n    provide: HttpBackend,\n    useExisting: FetchBackend\n  }]);\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nclass HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable() {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [withNoXsrfProtection().ɵproviders]\n    };\n  }\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n\n\n  static withOptions(options = {}) {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: withXsrfConfiguration(options).ɵproviders\n    };\n  }\n\n}\n\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, withXsrfConfiguration({\n    cookieName: XSRF_DEFAULT_COOKIE_NAME,\n    headerName: XSRF_DEFAULT_HEADER_NAME\n  }).ɵproviders, {\n    provide: XSRF_ENABLED,\n    useValue: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, withXsrfConfiguration({\n        cookieName: XSRF_DEFAULT_COOKIE_NAME,\n        headerName: XSRF_DEFAULT_HEADER_NAME\n      }).ɵproviders, {\n        provide: XSRF_ENABLED,\n        useValue: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nclass HttpClientModule {}\n\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideHttpClient(withInterceptorsFromDi())]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [provideHttpClient(withInterceptorsFromDi())]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\n\n\nclass HttpClientJsonpModule {}\n\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [withJsonpSupport().ɵproviders]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [withJsonpSupport().ɵproviders]\n    }]\n  }], null, null);\n})();\n\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\n\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\n\nfunction transferCacheInterceptorFn(req, next) {\n  const {\n    isCacheActive\n  } = inject(CACHE_STATE); // Stop using the cache if the application has stabilized, indicating initial rendering\n  // is complete.\n\n  if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n    // Cache is no longer active or method is not HEAD or GET.\n    // Pass the request through.\n    return next(req);\n  }\n\n  const transferState = inject(TransferState);\n  const storeKey = makeCacheKey(req);\n  const response = transferState.get(storeKey, null);\n\n  if (response) {\n    // Request found in cache. Respond using it.\n    let body = response.body;\n\n    switch (response.responseType) {\n      case 'arraybuffer':\n        body = new TextEncoder().encode(response.body).buffer;\n        break;\n\n      case 'blob':\n        body = new Blob([response.body]);\n        break;\n    }\n\n    return of(new HttpResponse({\n      body,\n      headers: new HttpHeaders(response.headers),\n      status: response.status,\n      statusText: response.statusText,\n      url: response.url\n    }));\n  } // Request not found in cache. Make the request and cache it.\n\n\n  return next(req).pipe(tap(event => {\n    if (event instanceof HttpResponse) {\n      transferState.set(storeKey, {\n        body: event.body,\n        headers: getHeadersMap(event.headers),\n        status: event.status,\n        statusText: event.statusText,\n        url: event.url || '',\n        responseType: req.responseType\n      });\n    }\n  }));\n}\n\nfunction getHeadersMap(headers) {\n  const headersMap = {};\n\n  for (const key of headers.keys()) {\n    const values = headers.getAll(key);\n\n    if (values !== null) {\n      headersMap[key] = values;\n    }\n  }\n\n  return headersMap;\n}\n\nfunction makeCacheKey(request) {\n  // make the params encoded same as a url so it's easy to identify\n  const {\n    params,\n    method,\n    responseType,\n    url\n  } = request;\n  const encodedParams = params.keys().sort().map(k => `${k}=${params.getAll(k)}`).join('&');\n  const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n  const hash = generateHash(key);\n  return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\n\n\nfunction generateHash(value) {\n  let hash = 0;\n\n  for (const char of value) {\n    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n  } // Force positive number hash.\n  // 2147483647 = equivalent of Integer.MAX_VALUE.\n\n\n  hash += 2147483647 + 1;\n  return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\n\n\nfunction withHttpTransferCache() {\n  return [{\n    provide: CACHE_STATE,\n    useFactory: () => {\n      inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n      return {\n        isCacheActive: true\n      };\n    }\n  }, {\n    provide: HTTP_ROOT_INTERCEPTOR_FNS,\n    useValue: transferCacheInterceptorFn,\n    multi: true,\n    deps: [TransferState, CACHE_STATE]\n  }, {\n    provide: APP_BOOTSTRAP_LISTENER,\n    multi: true,\n    useFactory: () => {\n      const appRef = inject(ApplicationRef);\n      const cacheState = inject(CACHE_STATE);\n      return () => {\n        appRef.isStable.pipe(first(isStable => isStable)).toPromise().then(() => {\n          cacheState.isCacheActive = false;\n        });\n      };\n    }\n  }];\n} // This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };","map":{"version":3,"names":["i0","Injectable","inject","NgZone","InjectionToken","ɵInitialRenderPendingTasks","Inject","ɵRuntimeError","PLATFORM_ID","makeEnvironmentProviders","NgModule","TransferState","makeStateKey","ɵENABLED_SSR_FEATURES","APP_BOOTSTRAP_LISTENER","ApplicationRef","of","Observable","from","concatMap","filter","map","finalize","switchMap","tap","first","i1","DOCUMENT","ɵparseCookieValue","HttpHandler","HttpBackend","HttpHeaders","constructor","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Headers","values","setHeaderEntries","ngDevMode","assertValidHeaders","Object","entries","init","length","keys","Array","getAll","append","clone","op","delete","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","headerValues","isArray","toString","fn","Error","HttpUrlEncodingCodec","encodeKey","standardEncoding","encodeValue","decodeKey","decodeURIComponent","decodeValue","paramParser","rawParams","codec","params","replace","param","eqIdx","val","list","STANDARD_ENCODING_REGEX","STANDARD_ENCODING_REPLACEMENTS","v","encodeURIComponent","s","t","valueToString","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","res","appendAll","_value","eKey","join","idx","splice","HttpContextToken","defaultValue","HttpContext","token","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","isUrlSearchParams","URLSearchParams","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","context","urlWithParams","qIdx","sep","serializeBody","JSON","stringify","detectContentTypeHeader","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","request","req","events$","pipe","handle","res$","event","head","jsonp","callbackParam","patch","post","put","ɵfac","ɵprov","XSSI_PREFIX$1","REQUEST_URL_HEADER","getResponseUrl$1","response","xRequestUrl","toLocaleLowerCase","FetchBackend","fetchImpl","FetchFactory","optional","fetch","bind","globalThis","ngZone","observer","aborter","AbortController","doRequest","signal","then","noop","abort","createRequestInit","fetchPromise","silenceSuperfluousUnhandledPromiseRejection","next","Sent","contentLength","chunks","reader","getReader","receivedLength","decoder","partialText","reqZone","Zone","current","runOutsideAngular","done","read","TextDecoder","decode","stream","DownloadProgress","total","loaded","run","chunksAll","concatChunks","parseBody","complete","binContent","text","parse","buffer","credentials","detectedType","totalLength","Uint8Array","position","chunk","promise","interceptorChainEndFn","finalHandlerFn","adaptLegacyInterceptorToChain","chainTailFn","interceptor","initialRequest","intercept","downstreamRequest","chainedInterceptorFn","interceptorFn","injector","runInContext","HTTP_INTERCEPTORS","HTTP_INTERCEPTOR_FNS","HTTP_ROOT_INTERCEPTOR_FNS","legacyInterceptorFnFactory","chain","interceptors","reduceRight","pendingTasks","taskId","add","remove","HttpInterceptorHandler","backend","dedupedInterceptorFns","Set","nextSequencedFn","EnvironmentInjector","nextRequestId","foreignDocument","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JSONP_ERR_HEADERS_NOT_SUPPORTED","JsonpCallbackContext","jsonpCallbackContext","window","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","nextCallback","callback","node","createElement","src","finished","data","cleanup","parentNode","removeChild","onLoad","onError","addEventListener","appendChild","removeListeners","script","implementation","createHTMLDocument","adoptNode","decorators","args","jsonpInterceptorFn","JsonpInterceptor","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","HttpXhrBackend","xhrFactory","source","ɵloadImpl","build","open","setRequestHeader","reqBody","headerResponse","partialFromXhr","responseText","originalBody","sentHeaders","onDownProgress","progressEvent","lengthComputable","onUpProgress","progress","UploadProgress","upload","send","removeEventListener","readyState","DONE","XhrFactory","XSRF_ENABLED","XSRF_DEFAULT_COOKIE_NAME","XSRF_COOKIE_NAME","providedIn","factory","XSRF_DEFAULT_HEADER_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","getToken","cookieString","cookie","xsrfInterceptorFn","lcUrl","startsWith","headerName","HttpXsrfInterceptor","HttpFeatureKind","makeHttpFeature","kind","providers","ɵkind","ɵproviders","provideHttpClient","features","featureKinds","f","NoXsrfProtection","CustomXsrfConfiguration","provide","useExisting","useValue","multi","useClass","feature","withInterceptors","interceptorFns","Interceptors","LEGACY_INTERCEPTOR_FN","withInterceptorsFromDi","LegacyInterceptors","useFactory","withXsrfConfiguration","withNoXsrfProtection","withJsonpSupport","JsonpSupport","withRequestsMadeViaParent","RequestsMadeViaParent","handlerFromParent","skipSelf","withFetch","Fetch","HttpClientXsrfModule","disable","ngModule","withOptions","ɵmod","ɵinj","HttpClientModule","HttpClientJsonpModule","CACHE_STATE","ALLOWED_METHODS","transferCacheInterceptorFn","isCacheActive","includes","transferState","storeKey","makeCacheKey","TextEncoder","encode","getHeadersMap","headersMap","encodedParams","sort","k","hash","generateHash","char","Math","imul","charCodeAt","withHttpTransferCache","deps","appRef","cacheState","isStable","toPromise","ɵHttpInterceptingHandler","ɵHttpInterceptorHandler","ɵwithHttpTransferCache"],"sources":["C:/Users/Development/Desktop/Site/node_modules/@angular/common/fesm2022/http.mjs"],"sourcesContent":["/**\n * @license Angular v16.2.9\n * (c) 2010-2022 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, inject, NgZone, InjectionToken, ɵInitialRenderPendingTasks, Inject, ɵRuntimeError, PLATFORM_ID, makeEnvironmentProviders, NgModule, TransferState, makeStateKey, ɵENABLED_SSR_FEATURES, APP_BOOTSTRAP_LISTENER, ApplicationRef } from '@angular/core';\nimport { of, Observable, from } from 'rxjs';\nimport { concatMap, filter, map, finalize, switchMap, tap, first } from 'rxjs/operators';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else if (typeof Headers !== 'undefined' && headers instanceof Headers) {\n            this.headers = new Map();\n            headers.forEach((values, name) => {\n                this.setHeaderEntries(name, values);\n            });\n        }\n        else {\n            this.lazyInit = () => {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    assertValidHeaders(headers);\n                }\n                this.headers = new Map();\n                Object.entries(headers).forEach(([name, values]) => {\n                    this.setHeaderEntries(name, values);\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or override for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    setHeaderEntries(name, values) {\n        const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());\n        const key = name.toLowerCase();\n        this.headers.set(key, headerValues);\n        this.maybeSetNormalizedName(name, key);\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n/**\n * Verifies that the headers object has the right shape: the values\n * must be either strings, numbers or arrays. Throws an error if an invalid\n * header value is present.\n */\nfunction assertValidHeaders(headers) {\n    for (const [key, value] of Object.entries(headers)) {\n        if (!(typeof value === 'string' || typeof value === 'number') && !Array.isArray(value)) {\n            throw new Error(`Unexpected value of the \\`${key}\\` header provided. ` +\n                `Expecting either a string, a number or an array, but got: \\`${value}\\`.`);\n        }\n    }\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * Encode input string with standard encodeURIComponent and then un-encode specific characters.\n */\nconst STANDARD_ENCODING_REGEX = /%(\\d[a-f0-9])/gi;\nconst STANDARD_ENCODING_REPLACEMENTS = {\n    '40': '@',\n    '3A': ':',\n    '24': '$',\n    '2C': ',',\n    '3B': ';',\n    '3D': '=',\n    '3F': '?',\n    '2F': '/',\n};\nfunction standardEncoding(v) {\n    return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);\n}\nfunction valueToString(value) {\n    return `${value}`;\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                // convert the values to strings\n                const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];\n                this.map.set(key, values);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value: value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(valueToString(update.value));\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(valueToString(update.value));\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * A token used to manipulate and access values stored in `HttpContext`.\n *\n * @publicApi\n */\nclass HttpContextToken {\n    constructor(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n}\n/**\n * Http context stores arbitrary user defined values and ensures type safety without\n * actually knowing the types. It is backed by a `Map` and guarantees that keys do not clash.\n *\n * This context is mutable and is shared between cloned requests unless explicitly specified.\n *\n * @usageNotes\n *\n * ### Usage Example\n *\n * ```typescript\n * // inside cache.interceptors.ts\n * export const IS_CACHE_ENABLED = new HttpContextToken<boolean>(() => false);\n *\n * export class CacheInterceptor implements HttpInterceptor {\n *\n *   intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n *     if (req.context.get(IS_CACHE_ENABLED) === true) {\n *       return ...;\n *     }\n *     return delegate.handle(req);\n *   }\n * }\n *\n * // inside a service\n *\n * this.httpClient.get('/api/weather', {\n *   context: new HttpContext().set(IS_CACHE_ENABLED, true)\n * }).subscribe(...);\n * ```\n *\n * @publicApi\n */\nclass HttpContext {\n    constructor() {\n        this.map = new Map();\n    }\n    /**\n     * Store a value in the context. If a value is already present it will be overwritten.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     * @param value The value to store.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    set(token, value) {\n        this.map.set(token, value);\n        return this;\n    }\n    /**\n     * Retrieve the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns The stored value or default if one is defined.\n     */\n    get(token) {\n        if (!this.map.has(token)) {\n            this.map.set(token, token.defaultValue());\n        }\n        return this.map.get(token);\n    }\n    /**\n     * Delete the value associated with the given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns A reference to itself for easy chaining.\n     */\n    delete(token) {\n        this.map.delete(token);\n        return this;\n    }\n    /**\n     * Checks for existence of a given token.\n     *\n     * @param token The reference to an instance of `HttpContextToken`.\n     *\n     * @returns True if the token exists, false otherwise.\n     */\n    has(token) {\n        return this.map.has(token);\n    }\n    /**\n     * @returns a list of tokens currently stored in the context.\n     */\n    keys() {\n        return this.map.keys();\n    }\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * Safely assert whether the given value is a URLSearchParams instance.\n *\n * In some execution environments URLSearchParams is not defined.\n */\nfunction isUrlSearchParams(value) {\n    return typeof URLSearchParams !== 'undefined' && value instanceof URLSearchParams;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         *\n         * Note: The `FetchBackend` doesn't support progress report on uploads.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.context) {\n                this.context = options.context;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no context have been passed in, construct a new HttpContext instance.\n        if (!this.context) {\n            this.context = new HttpContext();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            isUrlSearchParams(this.body) || typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, boolean and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            typeof this.body === 'boolean') {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Pass on context if needed\n        const context = update.context ?? this.context;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            context,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     *\n     * Note: The `FetchBackend` doesn't support progress report on uploads.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200 /* HttpStatusCode.Ok */, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        context: options.context,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/tour-of-heroes/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/understanding-communicating-with-http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                context: options.context,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilities of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClient, deps: [{ token: HttpHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClient }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClient, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpHandler }]; } });\n\nconst XSSI_PREFIX$1 = /^\\)\\]\\}',?\\n/;\nconst REQUEST_URL_HEADER = `X-Request-URL`;\n/**\n * Determine an appropriate URL for the response, by checking either\n * response url or the X-Request-URL header.\n */\nfunction getResponseUrl$1(response) {\n    if (response.url) {\n        return response.url;\n    }\n    // stored as lowercase in the map\n    const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();\n    return response.headers.get(xRequestUrl);\n}\n/**\n * Uses `fetch` to send requests to a backend server.\n *\n * This `FetchBackend` requires the support of the\n * [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) which is available on all\n * supported browsers and on Node.js v18 or later.\n *\n * @see {@link HttpHandler}\n *\n * @publicApi\n * @developerPreview\n */\nclass FetchBackend {\n    constructor() {\n        // We need to bind the native fetch to its context or it will throw an \"illegal invocation\"\n        this.fetchImpl = inject(FetchFactory, { optional: true })?.fetch ?? fetch.bind(globalThis);\n        this.ngZone = inject(NgZone);\n    }\n    handle(request) {\n        return new Observable(observer => {\n            const aborter = new AbortController();\n            this.doRequest(request, aborter.signal, observer)\n                .then(noop, error => observer.error(new HttpErrorResponse({ error })));\n            return () => aborter.abort();\n        });\n    }\n    async doRequest(request, signal, observer) {\n        const init = this.createRequestInit(request);\n        let response;\n        try {\n            const fetchPromise = this.fetchImpl(request.urlWithParams, { signal, ...init });\n            // Make sure Zone.js doesn't trigger false-positive unhandled promise\n            // error in case the Promise is rejected synchronously. See function\n            // description for additional information.\n            silenceSuperfluousUnhandledPromiseRejection(fetchPromise);\n            // Send the `Sent` event before awaiting the response.\n            observer.next({ type: HttpEventType.Sent });\n            response = await fetchPromise;\n        }\n        catch (error) {\n            observer.error(new HttpErrorResponse({\n                error,\n                status: error.status ?? 0,\n                statusText: error.statusText,\n                url: request.urlWithParams,\n                headers: error.headers,\n            }));\n            return;\n        }\n        const headers = new HttpHeaders(response.headers);\n        const statusText = response.statusText;\n        const url = getResponseUrl$1(response) ?? request.urlWithParams;\n        let status = response.status;\n        let body = null;\n        if (request.reportProgress) {\n            observer.next(new HttpHeaderResponse({ headers, status, statusText, url }));\n        }\n        if (response.body) {\n            // Read Progress\n            const contentLength = response.headers.get('content-length');\n            const chunks = [];\n            const reader = response.body.getReader();\n            let receivedLength = 0;\n            let decoder;\n            let partialText;\n            // We have to check whether the Zone is defined in the global scope because this may be called\n            // when the zone is nooped.\n            const reqZone = typeof Zone !== 'undefined' && Zone.current;\n            // Perform response processing outside of Angular zone to\n            // ensure no excessive change detection runs are executed\n            // Here calling the async ReadableStreamDefaultReader.read() is responsible for triggering CD\n            await this.ngZone.runOutsideAngular(async () => {\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    chunks.push(value);\n                    receivedLength += value.length;\n                    if (request.reportProgress) {\n                        partialText = request.responseType === 'text' ?\n                            (partialText ?? '') + (decoder ??= new TextDecoder).decode(value, { stream: true }) :\n                            undefined;\n                        const reportProgress = () => observer.next({\n                            type: HttpEventType.DownloadProgress,\n                            total: contentLength ? +contentLength : undefined,\n                            loaded: receivedLength,\n                            partialText,\n                        });\n                        reqZone ? reqZone.run(reportProgress) : reportProgress();\n                    }\n                }\n            });\n            // Combine all chunks.\n            const chunksAll = this.concatChunks(chunks, receivedLength);\n            try {\n                body = this.parseBody(request, chunksAll);\n            }\n            catch (error) {\n                // Body loading or parsing failed\n                observer.error(new HttpErrorResponse({\n                    error,\n                    headers: new HttpHeaders(response.headers),\n                    status: response.status,\n                    statusText: response.statusText,\n                    url: getResponseUrl$1(response) ?? request.urlWithParams,\n                }));\n                return;\n            }\n        }\n        // Same behavior as the XhrBackend\n        if (status === 0) {\n            status = body ? 200 /* HttpStatusCode.Ok */ : 0;\n        }\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        const ok = status >= 200 && status < 300;\n        if (ok) {\n            observer.next(new HttpResponse({\n                body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n            // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n            observer.complete();\n        }\n        else {\n            observer.error(new HttpErrorResponse({\n                error: body,\n                headers,\n                status,\n                statusText,\n                url,\n            }));\n        }\n    }\n    parseBody(request, binContent) {\n        switch (request.responseType) {\n            case 'json':\n                // stripping the XSSI when present\n                const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, '');\n                return text === '' ? null : JSON.parse(text);\n            case 'text':\n                return new TextDecoder().decode(binContent);\n            case 'blob':\n                return new Blob([binContent]);\n            case 'arraybuffer':\n                return binContent.buffer;\n        }\n    }\n    createRequestInit(req) {\n        // We could share some of this logic with the XhrBackend\n        const headers = {};\n        const credentials = req.withCredentials ? 'include' : undefined;\n        // Setting all the requested headers.\n        req.headers.forEach((name, values) => (headers[name] = values.join(',')));\n        // Add an Accept header if one isn't present already.\n        headers['Accept'] ??= 'application/json, text/plain, */*';\n        // Auto-detect the Content-Type header if one isn't present already.\n        if (!headers['Content-Type']) {\n            const detectedType = req.detectContentTypeHeader();\n            // Sometimes Content-Type detection fails.\n            if (detectedType !== null) {\n                headers['Content-Type'] = detectedType;\n            }\n        }\n        return {\n            body: req.serializeBody(),\n            method: req.method,\n            headers,\n            credentials,\n        };\n    }\n    concatChunks(chunks, totalLength) {\n        const chunksAll = new Uint8Array(totalLength);\n        let position = 0;\n        for (const chunk of chunks) {\n            chunksAll.set(chunk, position);\n            position += chunk.length;\n        }\n        return chunksAll;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: FetchBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: FetchBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: FetchBackend, decorators: [{\n            type: Injectable\n        }] });\n/**\n * Abstract class to provide a mocked implementation of `fetch()`\n */\nclass FetchFactory {\n}\nfunction noop() { }\n/**\n * Zone.js treats a rejected promise that has not yet been awaited\n * as an unhandled error. This function adds a noop `.then` to make\n * sure that Zone.js doesn't throw an error if the Promise is rejected\n * synchronously.\n */\nfunction silenceSuperfluousUnhandledPromiseRejection(promise) {\n    promise.then(noop, noop);\n}\n\nfunction interceptorChainEndFn(req, finalHandlerFn) {\n    return finalHandlerFn(req);\n}\n/**\n * Constructs a `ChainedInterceptorFn` which adapts a legacy `HttpInterceptor` to the\n * `ChainedInterceptorFn` interface.\n */\nfunction adaptLegacyInterceptorToChain(chainTailFn, interceptor) {\n    return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {\n        handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn),\n    });\n}\n/**\n * Constructs a `ChainedInterceptorFn` which wraps and invokes a functional interceptor in the given\n * injector.\n */\nfunction chainedInterceptorFn(chainTailFn, interceptorFn, injector) {\n    // clang-format off\n    return (initialRequest, finalHandlerFn) => injector.runInContext(() => interceptorFn(initialRequest, downstreamRequest => chainTailFn(downstreamRequest, finalHandlerFn)));\n    // clang-format on\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTORS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s.\n */\nconst HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_INTERCEPTOR_FNS' : '');\n/**\n * A multi-provided token of `HttpInterceptorFn`s that are only set in root.\n */\nconst HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? 'HTTP_ROOT_INTERCEPTOR_FNS' : '');\n/**\n * Creates an `HttpInterceptorFn` which lazily initializes an interceptor chain from the legacy\n * class-based interceptors and runs the request through it.\n */\nfunction legacyInterceptorFnFactory() {\n    let chain = null;\n    return (req, handler) => {\n        if (chain === null) {\n            const interceptors = inject(HTTP_INTERCEPTORS, { optional: true }) ?? [];\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `interceptors` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);\n        }\n        const pendingTasks = inject(ɵInitialRenderPendingTasks);\n        const taskId = pendingTasks.add();\n        return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));\n    };\n}\nclass HttpInterceptorHandler extends HttpHandler {\n    constructor(backend, injector) {\n        super();\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n        this.pendingTasks = inject(ɵInitialRenderPendingTasks);\n    }\n    handle(initialRequest) {\n        if (this.chain === null) {\n            const dedupedInterceptorFns = Array.from(new Set([\n                ...this.injector.get(HTTP_INTERCEPTOR_FNS),\n                ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, []),\n            ]));\n            // Note: interceptors are wrapped right-to-left so that final execution order is\n            // left-to-right. That is, if `dedupedInterceptorFns` is the array `[a, b, c]`, we want to\n            // produce a chain that is conceptually `c(b(a(end)))`, which we build from the inside\n            // out.\n            this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);\n        }\n        const taskId = this.pendingTasks.add();\n        return this.chain(initialRequest, downstreamRequest => this.backend.handle(downstreamRequest))\n            .pipe(finalize(() => this.pendingTasks.remove(taskId)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpInterceptorHandler, deps: [{ token: HttpBackend }, { token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpInterceptorHandler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpInterceptorHandler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: HttpBackend }, { type: i0.EnvironmentInjector }]; } });\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n/**\n * When a pending <script> is unsubscribed we'll move it to this document, so it won't be\n * executed.\n */\nlet foreignDocument;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n// Error text given when a request is passed to the JsonpClientBackend that has\n// headers set\nconst JSONP_ERR_HEADERS_NOT_SUPPORTED = 'JSONP requests do not support headers.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see {@link HttpHandler}\n * @see {@link HttpXhrBackend}\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Check the request headers. JSONP doesn't support headers and\n        // cannot set any that were supplied.\n        if (req.headers.keys().length > 0) {\n            throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200 /* HttpStatusCode.Ok */,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                if (!finished) {\n                    this.removeListeners(node);\n                }\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n    removeListeners(script) {\n        // Issue #34818\n        // Changing <script>'s ownerDocument will prevent it from execution.\n        // https://html.spec.whatwg.org/multipage/scripting.html#execute-the-script-block\n        if (!foreignDocument) {\n            foreignDocument = this.document.implementation.createHTMLDocument();\n        }\n        foreignDocument.adoptNode(script);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpClientBackend, deps: [{ token: JsonpCallbackContext }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpClientBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpClientBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n/**\n * Identifies requests with the method JSONP and shifts them to the `JsonpClientBackend`.\n */\nfunction jsonpInterceptorFn(req, next) {\n    if (req.method === 'JSONP') {\n        return inject(JsonpClientBackend).handle(req);\n    }\n    // Fall through for normal HTTP requests.\n    return next(req);\n}\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see {@link HttpInterceptor}\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param initialRequest The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => jsonpInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: JsonpInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see {@link HttpHandler}\n * @see {@link JsonpClientBackend}\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new ɵRuntimeError(-2800 /* RuntimeErrorCode.MISSING_JSONP_MODULE */, (typeof ngDevMode === 'undefined' || ngDevMode) &&\n                `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \\`withJsonpSupport()\\` call (if \\`provideHttpClient()\\` is used) or import the \\`HttpClientJsonpModule\\` in the root NgModule.`);\n        }\n        // Check whether this factory has a special function to load an XHR implementation\n        // for various non-browser environments. We currently limit it to only `ServerXhr`\n        // class, which needs to load an XHR implementation.\n        const xhrFactory = this.xhrFactory;\n        const source = xhrFactory.ɵloadImpl ? from(xhrFactory.ɵloadImpl()) : of(null);\n        return source.pipe(switchMap(() => {\n            // Everything happens on Observable subscription.\n            return new Observable((observer) => {\n                // Start by setting up the XHR object with request method, URL, and withCredentials\n                // flag.\n                const xhr = xhrFactory.build();\n                xhr.open(req.method, req.urlWithParams);\n                if (req.withCredentials) {\n                    xhr.withCredentials = true;\n                }\n                // Add all the requested headers.\n                req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n                // Add an Accept header if one isn't present already.\n                if (!req.headers.has('Accept')) {\n                    xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n                }\n                // Auto-detect the Content-Type header if one isn't present already.\n                if (!req.headers.has('Content-Type')) {\n                    const detectedType = req.detectContentTypeHeader();\n                    // Sometimes Content-Type detection fails.\n                    if (detectedType !== null) {\n                        xhr.setRequestHeader('Content-Type', detectedType);\n                    }\n                }\n                // Set the responseType if one was requested.\n                if (req.responseType) {\n                    const responseType = req.responseType.toLowerCase();\n                    // JSON responses need to be processed as text. This is because if the server\n                    // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                    // xhr.response will be null, and xhr.responseText cannot be accessed to\n                    // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                    // is parsed by first requesting text and then applying JSON.parse.\n                    xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n                }\n                // Serialize the request body if one is present. If not, this will be set to null.\n                const reqBody = req.serializeBody();\n                // If progress events are enabled, response headers will be delivered\n                // in two events - the HttpHeaderResponse event and the full HttpResponse\n                // event. However, since response headers don't change in between these\n                // two events, it doesn't make sense to parse them twice. So headerResponse\n                // caches the data extracted from the response whenever it's first parsed,\n                // to ensure parsing isn't duplicated.\n                let headerResponse = null;\n                // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n                // state, and memoizes it into headerResponse.\n                const partialFromXhr = () => {\n                    if (headerResponse !== null) {\n                        return headerResponse;\n                    }\n                    const statusText = xhr.statusText || 'OK';\n                    // Parse headers from XMLHttpRequest - this step is lazy.\n                    const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                    // Read the response URL from the XMLHttpResponse instance and fall back on the\n                    // request URL.\n                    const url = getResponseUrl(xhr) || req.url;\n                    // Construct the HttpHeaderResponse and memoize it.\n                    headerResponse =\n                        new HttpHeaderResponse({ headers, status: xhr.status, statusText, url });\n                    return headerResponse;\n                };\n                // Next, a few closures are defined for the various events which XMLHttpRequest can\n                // emit. This allows them to be unregistered as event listeners later.\n                // First up is the load event, which represents a response being fully available.\n                const onLoad = () => {\n                    // Read response state from the memoized partial data.\n                    let { headers, status, statusText, url } = partialFromXhr();\n                    // The body will be read out if present.\n                    let body = null;\n                    if (status !== 204 /* HttpStatusCode.NoContent */) {\n                        // Use XMLHttpRequest.response if set, responseText otherwise.\n                        body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                    }\n                    // Normalize another potential bug (this one comes from CORS).\n                    if (status === 0) {\n                        status = !!body ? 200 /* HttpStatusCode.Ok */ : 0;\n                    }\n                    // ok determines whether the response will be transmitted on the event or\n                    // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                    // but a successful status code can still result in an error if the user\n                    // asked for JSON data and the body cannot be parsed as such.\n                    let ok = status >= 200 && status < 300;\n                    // Check whether the body needs to be parsed as JSON (in many cases the browser\n                    // will have done that already).\n                    if (req.responseType === 'json' && typeof body === 'string') {\n                        // Save the original body, before attempting XSSI prefix stripping.\n                        const originalBody = body;\n                        body = body.replace(XSSI_PREFIX, '');\n                        try {\n                            // Attempt the parse. If it fails, a parse error should be delivered to the\n                            // user.\n                            body = body !== '' ? JSON.parse(body) : null;\n                        }\n                        catch (error) {\n                            // Since the JSON.parse failed, it's reasonable to assume this might not have\n                            // been a JSON response. Restore the original body (including any XSSI prefix)\n                            // to deliver a better error response.\n                            body = originalBody;\n                            // If this was an error request to begin with, leave it as a string, it\n                            // probably just isn't JSON. Otherwise, deliver the parsing error to the user.\n                            if (ok) {\n                                // Even though the response status was 2xx, this is still an error.\n                                ok = false;\n                                // The parse error contains the text of the body that failed to parse.\n                                body = { error, text: body };\n                            }\n                        }\n                    }\n                    if (ok) {\n                        // A successful response is delivered on the event stream.\n                        observer.next(new HttpResponse({\n                            body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                        // The full body has been received and delivered, no further events\n                        // are possible. This request is complete.\n                        observer.complete();\n                    }\n                    else {\n                        // An unsuccessful request is delivered on the error channel.\n                        observer.error(new HttpErrorResponse({\n                            // The error in this case is the response body (error from the server).\n                            error: body,\n                            headers,\n                            status,\n                            statusText,\n                            url: url || undefined,\n                        }));\n                    }\n                };\n                // The onError callback is called when something goes wrong at the network level.\n                // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n                // transmitted on the error channel.\n                const onError = (error) => {\n                    const { url } = partialFromXhr();\n                    const res = new HttpErrorResponse({\n                        error,\n                        status: xhr.status || 0,\n                        statusText: xhr.statusText || 'Unknown Error',\n                        url: url || undefined,\n                    });\n                    observer.error(res);\n                };\n                // The sentHeaders flag tracks whether the HttpResponseHeaders event\n                // has been sent on the stream. This is necessary to track if progress\n                // is enabled since the event will be sent on only the first download\n                // progress event.\n                let sentHeaders = false;\n                // The download progress event handler, which is only registered if\n                // progress events are enabled.\n                const onDownProgress = (event) => {\n                    // Send the HttpResponseHeaders event if it hasn't been sent already.\n                    if (!sentHeaders) {\n                        observer.next(partialFromXhr());\n                        sentHeaders = true;\n                    }\n                    // Start building the download progress event to deliver on the response\n                    // event stream.\n                    let progressEvent = {\n                        type: HttpEventType.DownloadProgress,\n                        loaded: event.loaded,\n                    };\n                    // Set the total number of bytes in the event if it's available.\n                    if (event.lengthComputable) {\n                        progressEvent.total = event.total;\n                    }\n                    // If the request was for text content and a partial response is\n                    // available on XMLHttpRequest, include it in the progress event\n                    // to allow for streaming reads.\n                    if (req.responseType === 'text' && !!xhr.responseText) {\n                        progressEvent.partialText = xhr.responseText;\n                    }\n                    // Finally, fire the event.\n                    observer.next(progressEvent);\n                };\n                // The upload progress event handler, which is only registered if\n                // progress events are enabled.\n                const onUpProgress = (event) => {\n                    // Upload progress events are simpler. Begin building the progress\n                    // event.\n                    let progress = {\n                        type: HttpEventType.UploadProgress,\n                        loaded: event.loaded,\n                    };\n                    // If the total number of bytes being uploaded is available, include\n                    // it.\n                    if (event.lengthComputable) {\n                        progress.total = event.total;\n                    }\n                    // Send the event.\n                    observer.next(progress);\n                };\n                // By default, register for load and error events.\n                xhr.addEventListener('load', onLoad);\n                xhr.addEventListener('error', onError);\n                xhr.addEventListener('timeout', onError);\n                xhr.addEventListener('abort', onError);\n                // Progress events are only enabled if requested.\n                if (req.reportProgress) {\n                    // Download progress is always enabled if requested.\n                    xhr.addEventListener('progress', onDownProgress);\n                    // Upload progress depends on whether there is a body to upload.\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.addEventListener('progress', onUpProgress);\n                    }\n                }\n                // Fire the request, and notify the event stream that it was fired.\n                xhr.send(reqBody);\n                observer.next({ type: HttpEventType.Sent });\n                // This is the return from the Observable function, which is the\n                // request cancellation handler.\n                return () => {\n                    // On a cancellation, remove all registered event listeners.\n                    xhr.removeEventListener('error', onError);\n                    xhr.removeEventListener('abort', onError);\n                    xhr.removeEventListener('load', onLoad);\n                    xhr.removeEventListener('timeout', onError);\n                    if (req.reportProgress) {\n                        xhr.removeEventListener('progress', onDownProgress);\n                        if (reqBody !== null && xhr.upload) {\n                            xhr.upload.removeEventListener('progress', onUpProgress);\n                        }\n                    }\n                    // Finally, abort the in-flight request.\n                    if (xhr.readyState !== xhr.DONE) {\n                        xhr.abort();\n                    }\n                };\n            });\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXhrBackend, deps: [{ token: i1.XhrFactory }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXhrBackend }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXhrBackend, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.XhrFactory }]; } });\n\nconst XSRF_ENABLED = new InjectionToken('XSRF_ENABLED');\nconst XSRF_DEFAULT_COOKIE_NAME = 'XSRF-TOKEN';\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_COOKIE_NAME,\n});\nconst XSRF_DEFAULT_HEADER_NAME = 'X-XSRF-TOKEN';\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME', {\n    providedIn: 'root',\n    factory: () => XSRF_DEFAULT_HEADER_NAME,\n});\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfCookieExtractor, deps: [{ token: DOCUMENT }, { token: PLATFORM_ID }, { token: XSRF_COOKIE_NAME }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfCookieExtractor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfCookieExtractor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [PLATFORM_ID]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [XSRF_COOKIE_NAME]\n                }] }]; } });\nfunction xsrfInterceptorFn(req, next) {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (!inject(XSRF_ENABLED) || req.method === 'GET' || req.method === 'HEAD' ||\n        lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next(req);\n    }\n    const token = inject(HttpXsrfTokenExtractor).getToken();\n    const headerName = inject(XSRF_HEADER_NAME);\n    // Be careful not to overwrite an existing header of the same name.\n    if (token != null && !req.headers.has(headerName)) {\n        req = req.clone({ headers: req.headers.set(headerName, token) });\n    }\n    return next(req);\n}\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(injector) {\n        this.injector = injector;\n    }\n    intercept(initialRequest, next) {\n        return this.injector.runInContext(() => xsrfInterceptorFn(initialRequest, downstreamRequest => next.handle(downstreamRequest)));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfInterceptor, deps: [{ token: i0.EnvironmentInjector }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfInterceptor }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpXsrfInterceptor, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.EnvironmentInjector }]; } });\n\n/**\n * Identifies a particular kind of `HttpFeature`.\n *\n * @publicApi\n */\nvar HttpFeatureKind;\n(function (HttpFeatureKind) {\n    HttpFeatureKind[HttpFeatureKind[\"Interceptors\"] = 0] = \"Interceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"LegacyInterceptors\"] = 1] = \"LegacyInterceptors\";\n    HttpFeatureKind[HttpFeatureKind[\"CustomXsrfConfiguration\"] = 2] = \"CustomXsrfConfiguration\";\n    HttpFeatureKind[HttpFeatureKind[\"NoXsrfProtection\"] = 3] = \"NoXsrfProtection\";\n    HttpFeatureKind[HttpFeatureKind[\"JsonpSupport\"] = 4] = \"JsonpSupport\";\n    HttpFeatureKind[HttpFeatureKind[\"RequestsMadeViaParent\"] = 5] = \"RequestsMadeViaParent\";\n    HttpFeatureKind[HttpFeatureKind[\"Fetch\"] = 6] = \"Fetch\";\n})(HttpFeatureKind || (HttpFeatureKind = {}));\nfunction makeHttpFeature(kind, providers) {\n    return {\n        ɵkind: kind,\n        ɵproviders: providers,\n    };\n}\n/**\n * Configures Angular's `HttpClient` service to be available for injection.\n *\n * By default, `HttpClient` will be configured for injection with its default options for XSRF\n * protection of outgoing requests. Additional configuration options can be provided by passing\n * feature functions to `provideHttpClient`. For example, HTTP interceptors can be added using the\n * `withInterceptors(...)` feature.\n *\n * @see {@link withInterceptors}\n * @see {@link withInterceptorsFromDi}\n * @see {@link withXsrfConfiguration}\n * @see {@link withNoXsrfProtection}\n * @see {@link withJsonpSupport}\n * @see {@link withRequestsMadeViaParent}\n * @see {@link withFetch}\n */\nfunction provideHttpClient(...features) {\n    if (ngDevMode) {\n        const featureKinds = new Set(features.map(f => f.ɵkind));\n        if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) &&\n            featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {\n            throw new Error(ngDevMode ?\n                `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` :\n                '');\n        }\n    }\n    const providers = [\n        HttpClient,\n        HttpXhrBackend,\n        HttpInterceptorHandler,\n        { provide: HttpHandler, useExisting: HttpInterceptorHandler },\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: xsrfInterceptorFn,\n            multi: true,\n        },\n        { provide: XSRF_ENABLED, useValue: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n    ];\n    for (const feature of features) {\n        providers.push(...feature.ɵproviders);\n    }\n    return makeEnvironmentProviders(providers);\n}\n/**\n * Adds one or more functional-style HTTP interceptors to the configuration of the `HttpClient`\n * instance.\n *\n * @see {@link HttpInterceptorFn}\n * @see {@link provideHttpClient}\n * @publicApi\n */\nfunction withInterceptors(interceptorFns) {\n    return makeHttpFeature(HttpFeatureKind.Interceptors, interceptorFns.map(interceptorFn => {\n        return {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useValue: interceptorFn,\n            multi: true,\n        };\n    }));\n}\nconst LEGACY_INTERCEPTOR_FN = new InjectionToken('LEGACY_INTERCEPTOR_FN');\n/**\n * Includes class-based interceptors configured using a multi-provider in the current injector into\n * the configured `HttpClient` instance.\n *\n * Prefer `withInterceptors` and functional interceptors instead, as support for DI-provided\n * interceptors may be phased out in a later release.\n *\n * @see {@link HttpInterceptor}\n * @see {@link HTTP_INTERCEPTORS}\n * @see {@link provideHttpClient}\n */\nfunction withInterceptorsFromDi() {\n    // Note: the legacy interceptor function is provided here via an intermediate token\n    // (`LEGACY_INTERCEPTOR_FN`), using a pattern which guarantees that if these providers are\n    // included multiple times, all of the multi-provider entries will have the same instance of the\n    // interceptor function. That way, the `HttpINterceptorHandler` will dedup them and legacy\n    // interceptors will not run multiple times.\n    return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [\n        {\n            provide: LEGACY_INTERCEPTOR_FN,\n            useFactory: legacyInterceptorFnFactory,\n        },\n        {\n            provide: HTTP_INTERCEPTOR_FNS,\n            useExisting: LEGACY_INTERCEPTOR_FN,\n            multi: true,\n        }\n    ]);\n}\n/**\n * Customizes the XSRF protection for the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withNoXsrfProtection` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withXsrfConfiguration({ cookieName, headerName }) {\n    const providers = [];\n    if (cookieName !== undefined) {\n        providers.push({ provide: XSRF_COOKIE_NAME, useValue: cookieName });\n    }\n    if (headerName !== undefined) {\n        providers.push({ provide: XSRF_HEADER_NAME, useValue: headerName });\n    }\n    return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);\n}\n/**\n * Disables XSRF protection in the configuration of the current `HttpClient` instance.\n *\n * This feature is incompatible with the `withXsrfConfiguration` feature.\n *\n * @see {@link provideHttpClient}\n */\nfunction withNoXsrfProtection() {\n    return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [\n        {\n            provide: XSRF_ENABLED,\n            useValue: false,\n        },\n    ]);\n}\n/**\n * Add JSONP support to the configuration of the current `HttpClient` instance.\n *\n * @see {@link provideHttpClient}\n */\nfunction withJsonpSupport() {\n    return makeHttpFeature(HttpFeatureKind.JsonpSupport, [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTOR_FNS, useValue: jsonpInterceptorFn, multi: true },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests via the parent injector's\n * `HttpClient` instead of directly.\n *\n * By default, `provideHttpClient` configures `HttpClient` in its injector to be an independent\n * instance. For example, even if `HttpClient` is configured in the parent injector with\n * one or more interceptors, they will not intercept requests made via this instance.\n *\n * With this option enabled, once the request has passed through the current injector's\n * interceptors, it will be delegated to the parent injector's `HttpClient` chain instead of\n * dispatched directly, and interceptors in the parent configuration will be applied to the request.\n *\n * If there are several `HttpClient` instances in the injector hierarchy, it's possible for\n * `withRequestsMadeViaParent` to be used at multiple levels, which will cause the request to\n * \"bubble up\" until either reaching the root level or an `HttpClient` which was not configured with\n * this option.\n *\n * @see {@link provideHttpClient}\n * @developerPreview\n */\nfunction withRequestsMadeViaParent() {\n    return makeHttpFeature(HttpFeatureKind.RequestsMadeViaParent, [\n        {\n            provide: HttpBackend,\n            useFactory: () => {\n                const handlerFromParent = inject(HttpHandler, { skipSelf: true, optional: true });\n                if (ngDevMode && handlerFromParent === null) {\n                    throw new Error('withRequestsMadeViaParent() can only be used when the parent injector also configures HttpClient');\n                }\n                return handlerFromParent;\n            },\n        },\n    ]);\n}\n/**\n * Configures the current `HttpClient` instance to make requests using the fetch API.\n *\n * This `FetchBackend` requires the support of the Fetch API which is available on all evergreen\n * browsers and on NodeJS from v18 onward.\n *\n * Note: The Fetch API doesn't support progress report on uploads.\n *\n * @publicApi\n * @developerPreview\n */\nfunction withFetch() {\n    if ((typeof ngDevMode === 'undefined' || ngDevMode) && typeof fetch !== 'function') {\n        // TODO: Create a runtime error\n        // TODO: Use ENVIRONMENT_INITIALIZER to contextualize the error message (browser or server)\n        throw new Error('The `withFetch` feature of HttpClient requires the `fetch` API to be available. ' +\n            'If you run the code in a Node environment, make sure you use Node v18.10 or later.');\n    }\n    return makeHttpFeature(HttpFeatureKind.Fetch, [\n        FetchBackend,\n        { provide: HttpBackend, useExisting: FetchBackend },\n    ]);\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                withNoXsrfProtection().ɵproviders,\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: withXsrfConfiguration(options).ɵproviders,\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientXsrfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientXsrfModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientXsrfModule, providers: [\n            HttpXsrfInterceptor,\n            { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n            { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n            withXsrfConfiguration({\n                cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                headerName: XSRF_DEFAULT_HEADER_NAME,\n            }).ɵproviders,\n            { provide: XSRF_ENABLED, useValue: true },\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientXsrfModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        HttpXsrfInterceptor,\n                        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                        withXsrfConfiguration({\n                            cookieName: XSRF_DEFAULT_COOKIE_NAME,\n                            headerName: XSRF_DEFAULT_HEADER_NAME,\n                        }).ɵproviders,\n                        { provide: XSRF_ENABLED, useValue: true },\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientModule, providers: [\n            provideHttpClient(withInterceptorsFromDi()),\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    /**\n                     * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                     * with supporting services for HTTP communications.\n                     */\n                    providers: [\n                        provideHttpClient(withInterceptorsFromDi()),\n                    ],\n                }]\n        }] });\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientJsonpModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientJsonpModule }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientJsonpModule, providers: [\n            withJsonpSupport().ɵproviders,\n        ] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.9\", ngImport: i0, type: HttpClientJsonpModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        withJsonpSupport().ɵproviders,\n                    ],\n                }]\n        }] });\n\nconst CACHE_STATE = new InjectionToken(ngDevMode ? 'HTTP_TRANSFER_STATE_CACHE_STATE' : '');\n/**\n * A list of allowed HTTP methods to cache.\n */\nconst ALLOWED_METHODS = ['GET', 'HEAD'];\nfunction transferCacheInterceptorFn(req, next) {\n    const { isCacheActive } = inject(CACHE_STATE);\n    // Stop using the cache if the application has stabilized, indicating initial rendering\n    // is complete.\n    if (!isCacheActive || !ALLOWED_METHODS.includes(req.method)) {\n        // Cache is no longer active or method is not HEAD or GET.\n        // Pass the request through.\n        return next(req);\n    }\n    const transferState = inject(TransferState);\n    const storeKey = makeCacheKey(req);\n    const response = transferState.get(storeKey, null);\n    if (response) {\n        // Request found in cache. Respond using it.\n        let body = response.body;\n        switch (response.responseType) {\n            case 'arraybuffer':\n                body = new TextEncoder().encode(response.body).buffer;\n                break;\n            case 'blob':\n                body = new Blob([response.body]);\n                break;\n        }\n        return of(new HttpResponse({\n            body,\n            headers: new HttpHeaders(response.headers),\n            status: response.status,\n            statusText: response.statusText,\n            url: response.url,\n        }));\n    }\n    // Request not found in cache. Make the request and cache it.\n    return next(req).pipe(tap((event) => {\n        if (event instanceof HttpResponse) {\n            transferState.set(storeKey, {\n                body: event.body,\n                headers: getHeadersMap(event.headers),\n                status: event.status,\n                statusText: event.statusText,\n                url: event.url || '',\n                responseType: req.responseType,\n            });\n        }\n    }));\n}\nfunction getHeadersMap(headers) {\n    const headersMap = {};\n    for (const key of headers.keys()) {\n        const values = headers.getAll(key);\n        if (values !== null) {\n            headersMap[key] = values;\n        }\n    }\n    return headersMap;\n}\nfunction makeCacheKey(request) {\n    // make the params encoded same as a url so it's easy to identify\n    const { params, method, responseType, url } = request;\n    const encodedParams = params.keys().sort().map((k) => `${k}=${params.getAll(k)}`).join('&');\n    const key = method + '.' + responseType + '.' + url + '?' + encodedParams;\n    const hash = generateHash(key);\n    return makeStateKey(hash);\n}\n/**\n * A method that returns a hash representation of a string using a variant of DJB2 hash\n * algorithm.\n *\n * This is the same hashing logic that is used to generate component ids.\n */\nfunction generateHash(value) {\n    let hash = 0;\n    for (const char of value) {\n        hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;\n    }\n    // Force positive number hash.\n    // 2147483647 = equivalent of Integer.MAX_VALUE.\n    hash += 2147483647 + 1;\n    return hash.toString();\n}\n/**\n * Returns the DI providers needed to enable HTTP transfer cache.\n *\n * By default, when using server rendering, requests are performed twice: once on the server and\n * other one on the browser.\n *\n * When these providers are added, requests performed on the server are cached and reused during the\n * bootstrapping of the application in the browser thus avoiding duplicate requests and reducing\n * load time.\n *\n */\nfunction withHttpTransferCache() {\n    return [\n        {\n            provide: CACHE_STATE,\n            useFactory: () => {\n                inject(ɵENABLED_SSR_FEATURES).add('httpcache');\n                return { isCacheActive: true };\n            }\n        },\n        {\n            provide: HTTP_ROOT_INTERCEPTOR_FNS,\n            useValue: transferCacheInterceptorFn,\n            multi: true,\n            deps: [TransferState, CACHE_STATE]\n        },\n        {\n            provide: APP_BOOTSTRAP_LISTENER,\n            multi: true,\n            useFactory: () => {\n                const appRef = inject(ApplicationRef);\n                const cacheState = inject(CACHE_STATE);\n                return () => {\n                    appRef.isStable.pipe(first((isStable) => isStable)).toPromise().then(() => {\n                        cacheState.isCacheActive = false;\n                    });\n                };\n            }\n        }\n    ];\n}\n\n// This file is not used to build this module. It is only used during editing\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FetchBackend, HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpContext, HttpContextToken, HttpErrorResponse, HttpEventType, HttpFeatureKind, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, provideHttpClient, withFetch, withInterceptors, withInterceptorsFromDi, withJsonpSupport, withNoXsrfProtection, withRequestsMadeViaParent, withXsrfConfiguration, HttpInterceptorHandler as ɵHttpInterceptingHandler, HttpInterceptorHandler as ɵHttpInterceptorHandler, withHttpTransferCache as ɵwithHttpTransferCache };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}